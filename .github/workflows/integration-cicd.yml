name: Integration CI
on:
  pull_request:
    branches: [integration]
  push:
    branches: [integration]
  workflow_dispatch: # ğŸ‘ˆ manual trigger

permissions:
  contents: write

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/devops-essentials
  CLOUD_RUN_SERVICE_INT: devops-essentials-int
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: europe-west1

jobs:
  verify:
    uses: ./.github/workflows/verify.yml
    secrets: inherit
    with:
      node-version: '20'

  release_build_push_integration:
    if: github.event_name == 'push'
    name: Release-it (minor) + Build & Push (integration)
    needs: verify
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # release-it needs tags/history

      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Configure git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # Bumps package.json minor, commits, tags vX.Y.Z, pushes back to integration
      - name: Run release-it (minor)
        run: npx release-it minor --ci

      - name: Read version
        id: version
        shell: bash
        run: |
          VERSION=$(jq -r .version package.json)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push (v${{ steps.version.outputs.version }})
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            docker.io/${{ env.IMAGE_NAME }}:v${{ steps.version.outputs.version }}
          cache-from: type=registry,ref=docker.io/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=docker.io/${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy_integration:
    if: github.event_name == 'push'
    name: Deploy to Cloud Run (INT)
    needs: release_build_push_integration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Deploy (INT service)
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.CLOUD_RUN_SERVICE_INT }}
          project_id: ${{ env.GCP_PROJECT_ID }}
          region: ${{ env.GCP_REGION }}
          image: docker.io/${{ env.IMAGE_NAME }}:v${{ needs.release_build_push_integration.outputs.version || '' }}
          # We'll pass the version by reading package.json again to be safe
          flags: --allow-unauthenticated
      - name: Read version (safety)
        id: v
        shell: bash
        run: |
          VERSION=$(jq -r .version package.json)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Re-deploy with exact version (if needed)
        if: always()
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.CLOUD_RUN_SERVICE_INT }}
          project_id: ${{ env.GCP_PROJECT_ID }}
          region: ${{ env.GCP_REGION }}
          image: docker.io/${{ env.IMAGE_NAME }}:v${{ steps.v.outputs.v }}
          flags: --allow-unauthenticated

      - name: Print INT URL
        run: echo "INT URL => ${{ steps.deploy.outputs.url }}"
